const tg = window.Telegram.WebApp;
tg.expand();

const params = new URLSearchParams(window.location.search);
const chat_id = params.get("chat_id");
const user_id = params.get("user_id");

const app = document.getElementById("content");

console.log("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL:", { chat_id, user_id });

async function getState() {
  try {
    console.log("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...");
    const res = await fetch(`/api/get_state?chat_id=${chat_id}&user_id=${user_id}`);
    const data = await res.json();
    console.log("üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data);
    
    if (!data.ok) {
      app.innerHTML = `<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã üò¢</p>`;
      return;
    }
    
    console.log(`üé≠ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.role}`);
    if (data.role === "admin") {
      renderAdmin(data);
    } else {
      renderPlayer(data);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ getState:", error);
    app.innerHTML = `<p>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è üò¢</p>`;
  }
}

function renderAdmin(data) {
  console.log("üëë –†–µ–Ω–¥–µ—Ä–∏–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å");
  const players = Object.values(data.players).map(p => 
    `<li class="py-1">${p.name} ${p.answered ? '‚úÖ' : '‚è≥'}</li>`
  ).join("");
  
  app.innerHTML = `
    <h2 class="text-xl mb-4">üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
    <div class="mb-4 p-3 bg-purple-800 rounded-lg">
      <h3 class="font-bold mb-2">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</h3>
      <ul class="text-left">${players}</ul>
    </div>
    <button id="startBtn" class="w-full py-3 bg-purple-600 rounded-lg hover:bg-purple-700 transition">
      ‚ñ∂ ${data.question ? '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' : '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'}
    </button>
    ${data.question ? `
      <div class="mt-4 p-3 bg-green-900 rounded-lg">
        <p class="font-bold">–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å:</p>
        <p>${data.question.question}</p>
      </div>
    ` : ''}
  `;
  document.getElementById("startBtn").onclick = startRound;
}

function renderPlayer(data) {
  console.log("üéÆ –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–∫–∞", data);
  
  if (!data.question) {
    app.innerHTML = `
      <div class="text-center">
        <p class="text-xl mb-4">‚è≥ –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞...</p>
        <button onclick="getState()" class="py-2 px-4 bg-blue-600 rounded-lg hover:bg-blue-700 transition">
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
        <div class="mt-4 text-sm text-gray-300">
          <p>–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${Object.keys(data.players || {}).length}</p>
        </div>
      </div>
    `;
    return;
  }
  
  const q = data.question;
  console.log("‚ùì –í–æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞:", q);
  
  app.innerHTML = `
    <h2 class="text-lg mb-3 font-semibold">${q.question}</h2>
    <div class="grid grid-cols-1 gap-3 mb-4">
      ${q.options.map((opt, i) => `
        <button class="option py-3 px-4 bg-purple-700 rounded-lg hover:bg-purple-600 transition text-left" data-idx="${i}">
          ${opt}
        </button>`).join("")}
    </div>
    <div class="text-sm text-gray-300">
      <p>–û—Ç–≤–µ—Ç–∏–ª–∏: ${Object.values(data.players || {}).filter(p => p.answered).length}/${Object.values(data.players || {}).length}</p>
    </div>
  `;
  
  document.querySelectorAll(".option").forEach(b => {
    b.onclick = (e) => {
      e.target.classList.add('bg-green-600');
      submitAnswer(e);
    };
  });
}

async function startRound() {
  try {
    console.log("üéØ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—É–Ω–¥");
    const btn = document.getElementById("startBtn");
    btn.disabled = true;
    btn.textContent = "–ó–∞–ø—É—Å–∫–∞–µ–º...";
    
    const response = await fetch("/api/admin/start", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: parseInt(chat_id), user_id: parseInt(user_id) })
    });
    
    const result = await response.json();
    console.log("üì® –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);
    
    if (result.ok) {
      setTimeout(getState, 1000);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ startRound:", error);
  }
}

async function submitAnswer(e) {
  const idx = parseInt(e.target.dataset.idx);
  console.log(`üìù –ò–≥—Ä–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç: –≤–∞—Ä–∏–∞–Ω—Ç ${idx}`);
  
  try {
    const res = await fetch("/api/submit", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        chat_id: parseInt(chat_id), 
        user: { id: parseInt(user_id) }, 
        given: idx 
      })
    });
    
    const result = await res.json();
    console.log("üì® –û—Ç–≤–µ—Ç –Ω–∞ submit:", result);
    
    if (res.ok) {
      app.innerHTML = `
        <div class="text-center">
          <p class="text-green-400 text-xl mb-4">‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!</p>
          <p>–ñ–¥—ë–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
          <button onclick="getState()" class="mt-4 py-2 px-4 bg-blue-600 rounded-lg">
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>
        </div>
      `;
    } else {
      app.innerHTML = `<p class="text-red-400 text-xl">–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ üòî</p>`;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ submitAnswer:", error);
    app.innerHTML = `<p class="text-red-400 text-xl">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è üòî</p>`;
  }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(getState, 1000);
getState();
